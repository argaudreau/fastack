#!/usr/bin/env node
let app = require('../app');
let debug = require('debug')('fastack:server');
let http = require('http');
let server = http.Server(app);
let io = require('socket.io')(server);
let spawn = require('child_process').spawn;
let fs = require('fs');
let archiver = require('archiver');
let rimraf = require('rimraf');

let host = process.env.HOST || 'localhost';
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

initSocket();

function initSocket() {
  io.on('connection', (socket) => {
      console.log('A user connected');
      // When the user requests to generate an angular app
      socket.on('angular generate', function(payload) { generateApp('angular', payload) });
      // When the user requests to generate a node app
      socket.on('node generate', function(payload) { generateApp('node', payload) });
      // When the user requests to generate a node app
      socket.on('react generate', function(payload) { generateApp('react', payload) });
      // When the user requests to generate a node app
      socket.on('vue generate', function(payload) { generateApp('vue', payload) });
      // When the user disconnects
      socket.on('disconnect', function() { console.log('A user disconnected') });
  });
}

function generateApp(type, payload) {
    if (!payload.app_name) {
        io.emit('generate error', 'ERROR: No app name specified');
        return;
    }
    // Generate the directory
    let process, params = [];
    switch (type) {
        case 'angular':
            params = ['new', payload.app_name, '--skip-install'];
            if (payload.features.no_test) params.push('--minimal=true');
            if (payload.features.routing) params.push('--routing=true');
            if (payload.features.skip_spec) params.push('--skipTests=true');
            process = spawn('ng', params, {cwd: './public/temp'});
            break;
        case 'node':
            params = [payload.app_name];
            if (payload.features.hogan === 'yes') params.push('--hogan');
            if (payload.features.view === 'none') params.push('--no-view');
            else params.push('--view=' + payload.features.view);
            process = spawn('express', params, {cwd: './public/temp'});
            break;
        case 'react':
            params = ['create-react-app', payload.app_name];
            process = spawn('npx', params, {cwd: './public/temp'});
            break;
        case 'vue':
            params = ['vue', 'create', payload.app_name, '-d'];
            if (payload.features.preset) {
                params.push('-i');
                params.push(payload.features.preset);
            }
            process = spawn('npx', params, {cwd: './public/temp'});
            break;
    }
    process.stdout.on('data', (data) => {
        io.emit('generate data', { type: 'data', data: data.toString() });
    });
    process.stderr.on('data', (data) => {
        io.emit('generate data', { type: 'error', data: data.toString() });
    });
    process.on('exit', (code) => {
        io.emit('generate data', { type: 'done', data: 'Process exited with code ' + code, code: code });
        // Document has been generated, zip archive and provide download link
        if (code === 0) zipArchive(payload.app_name, 'generate data');
    });
}

function zipArchive(name, source) {
    let output = fs.createWriteStream('./public/temp/' + name + '.zip');
    let archive = archiver('zip', { zlib: { level: 9 } });

    io.emit(source, { type: 'zip_start' });
    output.on('close', function() {
        let link = 'temp/' + name + '.zip';
        io.emit(source, { type: 'zip_done', data: 'Zip file is ready for download!', link: link});
    });

    archive.pipe(output);

    archive.directory('./public/temp/' + name, name);
    archive.finalize();
}

function removeFiles(payload) {
    console.log('Removing files', payload.name, payload.name + '.zip');
    rimraf('./public/temp/' + payload.name, function() {
        rimraf('./public/temp/' + payload.name + '.zip', function() {
            console.log('Done deleting');
        });
    });
}

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
